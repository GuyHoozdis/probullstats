# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

indent-width = 4
line-length = 120

target-version = "py311"


[lint]
# ------------------------------------------------------------------------------
# Rules: https://docs.astral.sh/ruff/rules/
# Settings: https://docs.astral.sh/ruff/settings/
# ------------------------------------------------------------------------------
# A   : flake8-builtins
# ANN : flake8-annotations
# ARG : flake8-unused-arguments
# B   : flake8-bugbear, B9 are more opinionated
# BLE : flake8-blind-except
# C   : mccabe (complexity)
# C4  : flake8-comprehensions
# D   : pydocstyle
# DAR : darglint
# DTZ : flake8-datetimez
# EM  : flake8-errmsg
# EXE : flake8-executable
# F   : pyflakes
# FA  : flake8-future-annotations
# FBT : flake8-boolean-trap (https://adamj.eu/tech/2021/07/10/python-type-hints-how-to-avoid-the-boolean-trap/)
# FLY : flynt
# G   : flake8-logging-format
# I   : isort
# ICN : flake8-import-conventions
# INP : flake8-no-pep420 (missing __init__.py)
# INT : flake8-gettext
# ISC : flake8-implicit-str-concat
# LOG : flake8-logging
# N   : pep8-naming
# PERF: perflint
# PGH : pygrep-hooks
# PIE : flake8-pie (misc lint checks)
# PTH : flake8-use-pathlib
# Q   : flake8-quotes
# RSE : flake8-raise
# RUF : ruff specific rules
# S   : flake8-bandit (security)
# SIM : flake8-simplify
# SLF : flake8-self
# SLOT: flake8-slots
# T10 : flake8-debugger
# T20 : flake8-print
# TCH : flake8-type-checking
# TID : flake8-tidy-imports
# TRY : tryceratops
# UP  : pyupgrade
# W,E : pycodestyle (Warnings and Errors)
# ------------------------------------------------------------------------------
select = [
  'A', 'ANN', 'ARG', 'B', 'BLE', 'C', 'C4', 'D', 'DTZ', 'E', 'EM', 'EXE', 'F', 'FA', 'FBT', 'FLY',
  'G', 'I', 'ICN', 'INP', 'INT', 'ISC', 'LOG', 'N', 'PERF', 'PGH', 'PIE', 'PL', 'PTH', 'Q', 'RSE',
  'RUF', 'S', 'SIM', 'SLF', 'SLOT', 'T10', 'T20', 'TCH', 'TD', 'TID', 'TRY', 'UP', 'W'
]

# ANN101: Missing annotation for self - https://docs.astral.sh/ruff/rules/missing-type-self/
# ANN102: Missing annotation for cls - https://docs.astral.sh/ruff/rules/missing-type-cls/
# ISC001: Disabled because it conflicts with formatter configuration.
ignore = ['ANN101', 'ANN102', 'ISC001']

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Ignore `D` rules everywhere except in the `src/` directory.
"!src/**.py" = ["D"]
"tests/features/environment.py" = ["ANN401", "INP001", "T10"]
"tests/features/steps/*.py" = ["ANN401", "F811"]

[lint.pydocstyle]
convention = "google"

[lint.isort]
required-imports = ["from __future__ import annotations"]
known-first-party = ["probullstats"]

[lint.mccabe]
max-complexity = 5


[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
